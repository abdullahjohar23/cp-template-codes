#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update> oderedSet;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n; cin >> n;
    int arr[n];

    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    map <int, int> mp; // key will be sorted in map

    for (int i = 0; i < n; i++) {
        mp[arr[i]]++;
    }

    cout << "Value\tFrequency" << endl; 
    
    for (auto it : mp) {
        cout << it.first << "\t" << it.second << endl;
    }
    
    return 0;
}

*********************************************************

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update> oderedSet;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n; cin >> n;
    vector <int> vec(n);
    
    for (auto &i : vec) {
        cin >> i;
    }

    map <int, int> mp;

    for (int i = 0; vec[i]; i++) {
        if (mp.find(vec[i]) == mp.end()) {
            mp[vec[i]] = 1;
        } else {
            mp[vec[i]]++;
        }
    }
    
    cout << "Value" << "\t" << "Frequency" << endl;
    
    for (auto &it : mp) {
        cout << it.first << "\t" << it.second << endl;
    }
    
    return 0;
}

/*

Input
12
1 3 2 5 4 5 4 1 1 1 4 2

Output
Key	Value
1	4
2	2
3	1
4	3
5	2

*/