#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update> oderedSet;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    // Set contains unique values and it sorts the set
    set <int> s1; // sort by default in ascending order
    set <int, greater <int>> s2; // it sorts descending order
    int n, a;
    cin >> n;

    for (int i = 0; i < n; i++) {
        cin >> a;
        s1.insert(a);
        s2.insert(a);
    }

    for (auto i : s1) {
        cout << i << ' ';
    }

    cout << endl;

    for (auto i : s2) {
        cout << i << ' ';
    }

    /*
    // Lower Bound & Upper Bounds
    cout << "\nLower Bound (1): " << *s1.lower_bound (1) ; // Prints 1 [Lower 1 can take place of element "1"]
    cout << "\nUpper Bound (1): " << *s1.upper_bound (1) ; // Prints 3 [Upper 1 can take place of element "3"]
    cout << "\nLower Bound (3): " << *s1.lower_bound (3) ; // Prints 3 [Lower 3 can take place of element "3"]
    cout << "\nUpper Bound (3): " << *s1.upper_bound (3) ; // Prints 5 [Upper 3 can take place of element "5"]
    cout << "\nLower Bound (4): " << *s1.lower_bound (4) ; // Prints 5 [Lower 4 can take place of element "5"]
    cout << "\nUpper Bound (4): " << *s1.upper_bound (4) ; // Prints 5 [Upper 4 can take place of element "5"]
    cout << "\nlower Bound (5): " << *s1.lower_bound (5) ; // Prints 5 [Lower 5 can take place of element "1"]
    cout << "\nUpper Bound (5): " << (s1.upper_bound (5) == s1.end()); // Prints 1 [Because last element cant have the upper bound. If it's not the last element, it will print 0]
    */

    // s.size() will print the size of the set
    // s.erase(value) will delete the value from the set

    set <int> st;
    st.insert ({1, 2, 4, 8, 16, 32});

    int n;
    cin >> n;

    if (st.find(n) != st.end()) {
        cout << "Found" << endl;
    } else {
        cout << "Not Found" << endl;
    }

    return 0;
}

/*

Input
12
1 3 2 5 4 5 4 1 1 1 4 2
5

Output
1 2 3 4 5
Not Found

*/