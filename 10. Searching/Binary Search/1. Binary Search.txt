#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

int main()
{
    // ios_base::sync_with_stdio(false);
    // cin.tie(NULL);
    // cout.tie(NULL);

    bool found = false;
    int n, arr[100];
    int l, r, m, x;

    /** Necessary Variables:
        l: denotes the most Left index
        r: denotes the most Right index
        m: denotes Middle index
        x: is the target value we wanna find
    **/

    cout << "\nEnter the Array size: ";
    cin >> n;

    // Taking Inputs in Array
    for (int i = 0; i < n; i++){
        cout << "Enter arr[" << i << "]: ";
        cin >> arr[i];
    }

    cout << "\nEnter the value you wanna find if it does exist or not: ";
    cin >> x;

    sort (arr, arr+n);

    l = 0, r = n-1;

    while (l <= r) {
        m = (l+r) / 2;

        if (x == arr[m]) {
            found = true;
            break;
        } else if (x < arr[m]) {
            r = m - 1;
        } else if (x > arr[m]) {
            l = m + 1;
        }
    }

    if (found == true) {
        cout << x << " exists in the array" << endl;
    } else {
        cout << x << " doesn't exist in the array" << endl;
    }

    // Build In Funtion, binary_search()
    // bool found = binary_search(arr.begin(), arr.end(), x); -> It returns 1 0r 0 {For Vectors}
    // bool found = binary_search(arr, arr+n, x); -> It returns 1 0r 0 {For arrays}
    
    return 0;
}