#include <bits/stdc++.h>

using namespace std;

// Big Numbers Division
string bigDivision(string number, int divisor) {
	// As result can be very large store it in string
	string ans;

	// Find prefix of number that is larger
	// than divisor.
	int idx = 0;
	int temp = number[idx] - '0';
	
    while (temp < divisor)
		temp = temp * 10 + (number[++idx] - '0');

	// Repeatedly divide divisor with temp. After
	// every division, update temp to include one
	// more digit.
	while (number.size() > idx) {
		// Store result in answer i.e. temp / divisor
		ans += (temp / divisor) + '0';

		// Take next digit of number
		temp = (temp % divisor) * 10 + number[++idx] - '0';
	}

	// If divisor is greater than number
	if (ans.length() == 0)
		return "0";

	// else return ans
	return ans;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    string number;
    int t, divisor;
    cin >> t;

    while (t--) {
	    int divisor;
        cin >> number >> divisor;
	    cout << bigDivision(number, divisor) << endl;
    }

	return 0;
}

/*

Input
3
1260257 37
12313413534672234
754
1248163264128256512 125

Output
34061
16330787181262
9985306113026052

*/