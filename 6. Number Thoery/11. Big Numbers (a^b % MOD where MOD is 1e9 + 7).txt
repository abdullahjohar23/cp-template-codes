#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

/*
    Given two numbers sa and sb represented as strings,
    find a^b % MOD where MOD is 1e9 + 7
    The numbers a and b can contain upto 106 digits
*/

const long long MOD = 1e9 + 7;
 
// Returns modulo exponentiation for two numbers
// represented as long long int. It is used by
// powerStrings(). Its complexity is log(n)

long long powerLL (long long x, long long n) {
    long long result = 1;
    while (n) {
        if (n % 2 == 1)
            result = result * x % MOD;
        n = n / 2;
        x = x * x % MOD;
    }
    return result;
}

// Returns modulo exponentiation for two numbers
// represented as strings. It is used by
// powerStrings()
long long powerStrings(string sa, string sb) {
    // We convert strings to number
 
    long long a = 0, b = 0;
 
    // calculating  a % MOD
    for (int i = 0; i < sa.length(); i++) {
        a = (a * 10 + (sa[i] - '0')) % MOD;
    }
 
    // calculating  b % (MOD - 1)
    for (int i = 0; i < sb.length(); i++) {
        b = (b * 10 + (sb[i] - '0')) % (MOD - 1);
    }
 
    // Now a and b are long long int
    // We calculate a^b using modulo exponentiation

    return powerLL(a, b);
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    // As numbers are very large
    // that is it may contains upto
    // 10^6 digits. So, we use string
    string sa, sb;
    cin >> sa >> sb;
    cout << powerStrings(sa, sb) << endl;
    
    return 0;
}

// Input  : sa = 2, sb = 3 
// Output : 8
// Input  : sa = 10000000000000000000000000000000000000000000 
//          sb = 10000000000000000000000000000000000000000000 
// Output : 494234546

// (a^b) % MOD = ((a % MOD)^b) % MOD