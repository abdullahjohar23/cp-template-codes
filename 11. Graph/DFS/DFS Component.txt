#include <bits/stdc++.h>

using namespace std;

const int lim = 100005;

vector <vector<long long>> adj(lim+1);
bool vis[lim+1];

void dfs (long long x) {
    cout << x << " -> ";
    vis[x] = 1;

    for (int i = 0; i < adj[x].size(); i++) {
        long long y = adj[x][i];
        
        if (vis[y] == 0) {
            dfs(y);
        }
    }
}

int main() 
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    long long n, m, x, y, comp = 0;
    cin >> n >> m;
    
    while (m--) {
        cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }

    for (int i = 1; i <= n; i++) {
        cout << "Connections of " << i << " : "; 
        
        for (int j = 0; j < adj[i].size(); j++) {
            cout << adj[i][j] << " ";
        }
        cout << endl;
    } 

    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            dfs(i);
            comp++;
        }
    }
    cout << endl << comp << endl;
    
    return 0;
}

// Input
// 5 4
// 1 2
// 3 4
// 1 4
// 5 2

// Output
// Connections of 1 : 2 4 
// Connections of 2 : 1 5 
// Connections of 3 : 4 
// Connections of 4 : 3 1 
// Connections of 5 : 2 
// 1 -> 2 -> 5 -> 4 -> 3 -> 
// 1