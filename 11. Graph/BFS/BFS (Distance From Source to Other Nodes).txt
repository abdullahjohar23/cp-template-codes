#include <bits/stdc++.h>

using namespace std;

const long long lim = 1e5 + 5;
long long n, m;
long long dis[lim], parent[lim];
vector <long long> adj[lim];

void bfs (long long source) {
    queue <long long> q;

    for (int i = 1; i <= n; i++) {
        dis[i] = -1;
        parent[i] = -1;
    }

    dis[source] = 0;
    q.push(source);

    while (!q.empty()) {
        long long u = q.front();
        q.pop();

        for (int i = 0; i < adj[u].size(); i++) {
            long long v = adj[u][i];
            
            if (dis[v] == -1) {
                dis[v] = dis[u] + 1;
                parent[v] = u;
                q.push(v);
            }
        }
    }
}

int main() 
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    // n = number of nodes
    // m = number of edges
    cin >> n >> m;
    
    for (int i = 1; i <= m; i++) {
        long long x, y;
        cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }

    // source = starting node
    // current = destination
    long long source, current;
    cin >> source >> current;
    
    bfs(source);

    for (int i = 1; i <= n; i++) {
        cout << "Distance of " << source << " to " << i << " is : " << dis[i] << " " << endl;
    }

    return 0;
}

// Input
// 9 9
// 1 2 
// 1 5
// 2 3
// 2 4
// 5 6
// 5 7
// 6 9
// 6 8
// 7 8
// 4 9

// Output
// Distance of 4 to 1 is : 2 
// Distance of 4 to 2 is : 1 
// Distance of 4 to 3 is : 2 
// Distance of 4 to 4 is : 0 
// Distance of 4 to 5 is : 3 
// Distance of 4 to 6 is : 4 
// Distance of 4 to 7 is : 4 
// Distance of 4 to 8 is : 5 
// Distance of 4 to 9 is : 5 