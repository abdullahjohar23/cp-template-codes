#include <bits/stdc++.h>

using namespace std;

const long long lim = 1e5 + 5;
long long n, m;
long long dis[lim], parent[lim];
vector <long long> adj[lim];

void bfs (long long source) {
    queue <long long> q;

    for (int i = 1; i <= n; i++) {
        dis[i] = -1;
        parent[i] = -1;
    }

    dis[source] = 0;
    q.push(source);

    while (!q.empty()) {
        long long u = q.front();
        q.pop();

        for (int i = 0; i < adj[u].size(); i++) {
            long long v = adj[u][i];
            
            if (dis[v] == -1) {
                dis[v] = dis[u] + 1;
                parent[v] = u;
                q.push(v);
            }
        }
    }
}

int main() 
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    // n = number of nodes
    // m = number of edges
    cin >> n >> m;
    
    for (int i = 1; i <= m; i++) {
        long long x, y;
        cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }

    // source = starting node
    // current = destination
    long long source, current, distance;
    cin >> source >> current;
    
    bfs(source);

    distance = dis[current] + 1;

    vector <long long> path;
    
    // Shortest Path of Source to Destination
    while (current != -1) {
        path.push_back(current);
        current = parent[current];
    }

    reverse(path.begin(), path.end());
    
    cout << distance << endl;

    for (int i = 0; i < path.size(); i++) {
        cout << path[i] << " ";
    }

    return 0;
}

// Input
// 9 9
// 1 2 
// 1 5
// 2 3
// 2 4
// 5 6
// 5 7
// 6 9
// 6 8
// 7 8
// 4 9

// Output
// 6
// 4 2 1 5 6 9