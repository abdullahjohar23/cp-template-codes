#include <bits/stdc++.h>

using namespace std;

const long long lim = 1e5 + 5;
long long n, m, w;
long long dis[lim], vv[lim];
vector <pair <long long, long long>> adj[lim]; // Pair is a customized datatype here for this adj vector

void dijkstra (int x) {
	priority_queue <
        pair <long long, int>,
        vector <pair <long long, long long>>,
        greater <pair <long long, long long>>
    > pq; // Min priority queue that prioritize from min to max 

	pq.push({0, x}); // Pushing the source node second, weight first as pair into the priority queue
	dis[x] = 0;
	vv[x] = -1;

	while (!pq.empty()) {
		int u = pq.top().second; // queue - front, Priority Queue - top, top first index , second index is the node
		pq.pop();

		if (u == 1) {
            return; // as it is a void function
        }

		for(int i = 0; i < adj[u].size(); i++) {
			int w = adj[u][i].first; // Weight of v node from u node
			int v = adj[u][i].second; // Child node of u parent node

			if (dis[u] + w < dis[v]) {
				vv[v] = u;
				dis[v] = dis[u] + w;
				pq.push({dis[v], v}); // Pushing as a pair in node second, new weight first index
			}
		}
	}
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    // n = number of nodes
    // m = number of wights
    // w = value of a weight
	cin >> n >> m;

	while (m--) {
        int a, b;
		cin >> a >> b >> w; // As it is undirected or bidirectional
		adj[a].push_back({w, b}); // Pair wise pushing first weight/cost, second node
		adj[b].push_back({w, a});
	}

	for (int i = 1; i <= n; i++) {
		vv[i] = -1;
		dis[i] = LONG_LONG_MAX;
	}

	dijkstra(n);

	int y = 1;
	
    if (vv[1] == -1) {
		cout << "-1" << endl;
	} else {
        cout << 1;
		
        while(vv[y] != -1) {
			cout << " " << vv[y];
			
            if (vv[y] == n) {
                break;
            } else {
                y = vv[y];
            }
		}
    }

	cout << endl;

	for (int i = 1; i <= n; i++) {
		adj[i].clear();
	}

	return 0;
}

/*

Input
5 6
1 2 2
2 5 5
2 3 4
1 4 1
4 3 3
3 5 1

Output
1 4 3 5

*/