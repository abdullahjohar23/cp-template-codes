#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace std;
using namespace __gnu_pbds;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
 
    int n, m;
    cin >> n >> m;

    vector <pair <int, int>> graph[n + 1];
    vector <int> dist(n + 1, INT_MAX);
    vector <bool> visited(n + 1, false);
    vector <int> parent(n + 1, -1);
    
    while (m--) {
        int a, b, w;
        cin >> a >> b >> w;
        graph[a].push_back (make_pair(b, w));
        graph[b].push_back (make_pair(a, w));

        // pushing back twice to make it undirected or bidirectional
    }

    // priority queue that prioritize from min to max 
    priority_queue <
        pair <int, int>,
        vector <pair <int, int>>,
        greater <pair <int, int>>
    > pq;
    
    pq.push (make_pair(0, 1)); // first distance from 1 is 1 and the distance is 0
    dist[1] = 0;
    
    while (!pq.empty()) {
        int u = pq.top().second; // node
        int x = pq.top().first;  // distance
        pq.pop();
        
        if (x > dist[u])
            continue;
        
        visited[u] = true;
        
        for (auto i : graph[u]) {
            int v = i.first;
            int w = i.second;
            
            if (!visited[v] && dist[v] > dist[u] + w) {
                dist[v] = dist[u] + w;
                pq.push(make_pair(dist[v], v));
                parent[v] = u;
            }
        }
    }

    vector <int> path;

    for (int j = n; j >= 0; j = parent[j])
        path.push_back(j);
    
    reverse(path.begin(), path.end());
    
    if (!visited[n]) {
        cout << -1 << endl;
    } else {
        for (auto i : path)
            cout << i << " ";
        cout << endl;
    }

    return 0;
}


/** Example

5 6
1 2 2
2 5 5
2 3 4
1 4 1
4 3 3
3 5 1

1 4 3 5

*/