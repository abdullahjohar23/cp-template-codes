#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

string longestPalindrome (string s) {
    string ans = s.substr(0, 1);
    int l, r, n = s.size();
    bool flag;

    for (int i = 0; i < n; i++) {
        l = i - 1, r = i + 1, flag = false;
        while ((l >= 0 and r < n) and (s[l] == s[r])) l--, r++, flag = true;
        if (flag == true and (r - l - 1) > ans.size()) ans = s.substr(l + 1, r - l - 1);
            
        l = i, r = i + 1, flag = false;
        while ((l >= 0 and r < n) and (s[l] == s[r])) l--, r++, flag = true;
        if (flag == true and (r - l - 1) > ans.size()) ans = s.substr(l + 1, r - l - 1);
    }

    return ans;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    string s;
    cin >> s;
    cout << longestPalindrome(s) << endl;

    return 0;
}

/*

Input: babad
Output: bab

Input: cbbd
Output: bb

*/