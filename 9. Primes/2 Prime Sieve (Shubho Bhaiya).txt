#include <bits/stdc++.h>

using namespace std;

int mark[10000001];
long long prime_list[10000000];
int cnt = 0; // number for indexes for prime_list[] array

// 0 == Prime
// 1 == Not Prime

void sieve()
{
    long long n = 10000000;
    long long lim = sqrt(n);

    mark[1] = 1;

    for(int i = 4; i <= n; i += 2){
        mark[i] = 1; // making all the odd numbers (except 2) not prime
    }

    prime_list[cnt] = 2; // it means prime_list[0] = 2; because first prime number is 2; [2, 3, 5, 7, 11, ...]
    cnt++; // cnt is now 1 (keep in note)

    for(int i = 3; i <= n; i+=2){
        if(mark[i] == 0){ // checking if i is prime or not
            prime_list[cnt] = i; // as cnt was 1 in "keep in note", so prime_list[1] = 3 now, which means prime_list[0, 1] = [2, 3]
            cnt++; // this will start from 2 to so on and so forth

            // this loop is to make all the multipliers 1 "Not Prime"
            if (i <= lim) {
                for(int j = i*2; j <= n; j += i){ // here j = i*2; so for 3, j = 3*2 = 6 and the update is +i, so then j wil be 6+3 = 9, then it will be 9+3 = 12, then 15, then 18 ... so every multiplier of 3 will be Not Prime eventually
                    mark[j] = 1;
                }
            }
        }
    }
}

int main()
{
    sieve();

    int howMany;
    cout << "How many Prime Numbers you want: ";
    cin >> howMany;

    cout << "\nYour " << howMany << " Prime Numbers are:\n" << endl;
    for(int i = 0; i < howMany; i++){
        cout << i+1 << ". " << prime_list[i] <<  endl;
    }

    return 0;
}