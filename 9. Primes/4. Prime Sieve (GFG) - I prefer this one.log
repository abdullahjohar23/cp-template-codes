#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

vector <int> sieve (int n) {
    vector <int> primeList;

    bool list[n + 1];
    memset(list, true, sizeof(list));
 
    for (int i = 2; i * i <= n; i++) {
        if (list[i] == true) {
            for (int j = i * i; j <= n; j += i) {
                list[j] = false;
            }
        }
    }
    
    for (int i = 2; i <= n; i++) {
        if (list[i]) {
            primeList.push_back(i);
        }
    }
    
    return primeList;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    // Enter 'n' to print all the prime numbers within 2 to n
    int n;
    cin >> n;

    vector <int> primes = sieve(n);

    for (int i = 0; i < primes.size(); i++) {
        cout << primes[i] << endl;
    }

    return 0;
}

/*

Sample Input
14

Sample Output
2
3
5
7
11
13

*/